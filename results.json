{
  "_links": {
    "self": {
      "href": "/scan/efec7d15-83ba-4fd3-9be6-10feb03b08b5"
    },
    "root": {
      "href": "/"
    },
    "help": {
      "href": "https://help.veracode.com/reader/LMv_dtSHyb7iIxAQznC~9w/56JX_MvP4edL8JB_h8ywGA"
    }
  },
  "results": {
    "TestResults": {
      "GLIssues": {
        "Issue": [
          {
            "IssueTypeId": "crypto",
            "Severity": "0",
            "Title": "java.util.Random.nextDouble",
            "FlawMatch": {
              "CauseHash": "2439302015",
              "CauseHashOrdinal": "1",
              "PrototypeHash": "4146034803",
              "ProcedureHash": "2845927188",
              "CauseHashCount": "1",
              "FlawHashOrdinal": "3",
              "FlawHash": "4001066716",
              "FlawHashCount": "3"
            },
            "GOB": "G",
            "DisplayText": "\u003cspan\u003eThis is an acceptably strong pseudorandom number generator (PRNG) for cryptographic usage.\u003c/span\u003e \u003cspan\u003eThis is not a flaw. No fix required.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/338.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "FunctionName": "!ctor",
                "QualifiedFunctionName": "com.srcclr.Flaw.!ctor",
                "FunctionPrototype": "void !ctor()",
                "File": "com/srcclr/Flaw.java",
                "Line": "14",
                "Scope": "com.srcclr.Flaw"
              }
            },
            "IssueType": "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
            "CWEId": "338",
            "VCId": "338.501",
            "IssueId": "1003"
          },
          {
            "IssueTypeId": "reliability",
            "Severity": "0",
            "Title": "java.util.Random.nextDouble",
            "FlawMatch": {
              "CauseHash": "2439302015",
              "CauseHashOrdinal": "1",
              "PrototypeHash": "4146034803",
              "ProcedureHash": "2845927188",
              "CauseHashCount": "1",
              "FlawHashOrdinal": "3",
              "FlawHash": "4001066716",
              "FlawHashCount": "3"
            },
            "GOB": "G",
            "DisplayText": "\u003cspan\u003eThis is an acceptably strong pseudorandom number generator (PRNG) for cryptographic usage.\u003c/span\u003e \u003cspan\u003eThis is not a flaw. No fix required.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "FunctionName": "!ctor",
                "QualifiedFunctionName": "com.srcclr.Flaw.!ctor",
                "FunctionPrototype": "void !ctor()",
                "File": "com/srcclr/Flaw.java",
                "Line": "14",
                "Scope": "com.srcclr.Flaw"
              }
            },
            "IssueType": "Insufficient Entropy",
            "CWEId": "331",
            "VCId": "331.501",
            "IssueId": "1001"
          }
        ]
      },
      "Issues": {
        "Issue": [
          {
            "IssueTypeId": "reliability",
            "Severity": "3",
            "Title": "java.util.Random.nextDouble",
            "FlawMatch": {
              "CauseHash": "2439302015",
              "CauseHashOrdinal": "1",
              "PrototypeHash": "4146034803",
              "ProcedureHash": "2845927188",
              "CauseHashCount": "1",
              "FlawHashOrdinal": "1",
              "FlawHash": "4001066716",
              "FlawHashCount": "3"
            },
            "GOB": "B",
            "DisplayText": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "FunctionName": "!ctor",
                "QualifiedFunctionName": "com.srcclr.Flaw.!ctor",
                "FunctionPrototype": "void !ctor()",
                "File": "com/srcclr/Flaw.java",
                "Line": "12",
                "Scope": "com.srcclr.Flaw"
              }
            },
            "IssueType": "Insufficient Entropy",
            "CWEId": "331",
            "VCId": "331.001",
            "IssueId": "1002"
          },
          {
            "IssueTypeId": "reliability",
            "Severity": "3",
            "Title": "java.util.Random.nextDouble",
            "FlawMatch": {
              "CauseHash": "2439302015",
              "CauseHashOrdinal": "1",
              "PrototypeHash": "4146034803",
              "ProcedureHash": "2845927188",
              "CauseHashCount": "1",
              "FlawHashOrdinal": "2",
              "FlawHash": "4001066716",
              "FlawHashCount": "3"
            },
            "GOB": "B",
            "DisplayText": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "FunctionName": "!ctor",
                "QualifiedFunctionName": "com.srcclr.Flaw.!ctor",
                "FunctionPrototype": "void !ctor()",
                "File": "com/srcclr/Flaw.java",
                "Line": "13",
                "Scope": "com.srcclr.Flaw"
              }
            },
            "IssueType": "Insufficient Entropy",
            "CWEId": "331",
            "VCId": "331.001",
            "IssueId": "1000"
          }
        ]
      }
    }
  },
  "scan_status": "SUCCESS",
  "devops_scanner_java": "DevOps-19.6.0-0"
}